using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CoreDAL.Interfaces;
using CoreDAL.Models;
using CoreDAL.Models.v2;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Sieve.Models;
using Sieve.Services;

namespace CoreApp.Controllers.Api
{

    //[Authorize]
    [Route("/api/[controller]")]
    [ApiController]//dotnet 2.1 attribute
    public class OwnersController : BaseAuthorizedAPIControllerWithUser
    {
        private readonly IOwnerService _ownerService;
        private readonly ISieveProcessor _sieveProcessor;

        public OwnersController(IOwnerService ownerService, ISieveProcessor sieveProcessor, IABKCUserService abkcUserService) : base(abkcUserService)
        {
            _ownerService = ownerService;
            _sieveProcessor = sieveProcessor;
        }


        //[HttpGet("GetDogsByName")]
        //[ProducesResponseType(200, Type = typeof(ICollection<Dogs>))]
        //[ProducesResponseType(404)]
        //public async Task<ICollection<Dogs>> GetDogsByName(string dogName)
        //{
        //    var foundDogs = await _dogService.GetDogsMatchingName(dogName);
        //    return foundDogs;
        //}

        [HttpGet("{id}")]
        [ProducesResponseType(200, Type = typeof(Owners))]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Owners>> GetOwnerById(string id)
        {
            Owners foundOwner = await _ownerService.GetById(id);
            if (foundOwner == null)
            {
                return NotFound();
            }
            return foundOwner;
        }

        [HttpGet("GetOwnersCount")]
        [ProducesResponseType(200, Type = typeof(int))]
        public async Task<ActionResult<int>> GetOwnersCount() => await _ownerService.GetOwnersCount();

        [HttpPost]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<Owners>> CreateOwnerAsync(Owners newOwner)
        {
            //following is not needed in core 2.1
            // if (!ModelState.IsValid)
            // {
            //     return BadRequest(ModelState);
            // }
            //do we need to validate here since the service does it?
            if (newOwner.Id > 0)
            {
                return BadRequest("A post request is idempotent and cannot have an id assigned. Ids are autogenerated");
            }
            if (string.IsNullOrEmpty(newOwner.Email))
            {
                return BadRequest("Owner email must be supplied");
            }
            if (string.IsNullOrEmpty(newOwner.LastName))
            {
                return BadRequest("Owner lastname must be supplied");
            }
            UserModel user = await base.GetLoggedInUser();
            Owners rtnOwner = await _ownerService.AddOwner(newOwner, user);

            return CreatedAtAction(nameof(GetOwnerById),
                new { id = newOwner.Id }, newOwner);
        }

        [HttpPut("{id}")]
        [ProducesResponseType(202)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<Owners>> UpdateOwnerAsync(Owners ownerToUpdate)
        {

            Owners foundOwner = await _ownerService.GetById(ownerToUpdate.Id.ToString());
            if (foundOwner == null)
            {
                return NotFound(ownerToUpdate.Id);
            }
            if (string.IsNullOrEmpty(ownerToUpdate.Email))
            {
                return BadRequest("Owner email must be supplied");
            }
            if (string.IsNullOrEmpty(ownerToUpdate.LastName))
            {
                return BadRequest("Owner lastname must be supplied");
            }
            if (!CoreDAL.Utilities.Validators.IsValidEmail(ownerToUpdate.Email))
            {
                return BadRequest("Owner Email is not in a valid format");
            }
            //rehydrate navigation properties?
            UserModel user = await base.GetLoggedInUser();
            Owners rtnOwner = await _ownerService.UpdateOwner(ownerToUpdate, user);

            return Ok(rtnOwner);
        }

        [HttpGet("GetMatchingOwners")]
        [ProducesResponseType(200)]
        public async Task<ActionResult> GetMatchingOwners(string searchText)
        {
            IQueryable<Owners> query = _ownerService.GetOwnersQueryStartsWith(searchText);
            var results = await query.Select(d => new { d.Id, d.FirstName, d.LastName, d.FullName, d.OwnerId }).ToListAsync();
            //string formattedResult = JsonConvert.SerializeObject(results, Formatting.Indented);

            Response.Headers.Add("x-total-count", results.Count.ToString());
            return Ok(results);
        }

        #region Owner Searching and Lists

        [HttpPost("GetOwnersForTable")]
        [ProducesResponseType(200, Type = typeof(ICollection<Owners>))]
        public async Task<ActionResult<ICollection<Owners>>> GetOwnersForTableAsync(SieveModel searchParams, bool externalFilter)
        {
            try
            {
                IQueryable<Owners> query = null;
                if (externalFilter && searchParams.FiltersParsed != null && searchParams.FiltersParsed.Count > 0)
                {
                    //use the filters in search parameters to do an or search on first name, lastname and email
                    query = _ownerService.GetOwnersQueryStartsWith(searchParams.FiltersParsed[0].Value);
                    searchParams.Filters = null;
                }
                else
                {
                    query = _ownerService.GetOwnersQuery(false); // Makes read-only queries faster
                }
                var filteredResult = _sieveProcessor.Apply(searchParams, query); // Returns `result` after applying the sort/filter/page query in `SieveModel` to it

                //get count without paging
                searchParams.Page = null;
                searchParams.PageSize = null;
                int count = await _sieveProcessor.Apply(searchParams, query).CountAsync();
                Response.Headers.Add("x-total-count", count.ToString());

                ICollection<Owners> tmp = await filteredResult.ToListAsync();

                return Ok(tmp);
            }
            catch (Exception x)
            {

                throw;
            }

        }


        #endregion
    }
}